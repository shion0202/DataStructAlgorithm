#pragma once
#include <iostream>
#include <queue>
using namespace std;

/*

[ 공유 프린터 인쇄 대기 목록 시뮬레이션 ]
사무실 등에서 여러 대의 컴퓨터가 한 대의 프린터에 연결되어 있는 상황을 가정하여, 인쇄 요청 상황을 구현

1. 프린터는 한 번에 하나의 인쇄 요청을 수행할 수 있으며 인쇄 작업을 완료하기 위해 일정 시간이 필요하다.
2. 그 동안 다른 사용자가 인쇄 용청을 보낼 수 있으며, 이러한 지연된 인쇄 요청 내역을 저장한다.
3. 현재 인쇄 작업이 완료되면 지연된 인쇄 요청 내역을 확인하여 다음 인쇄 작업을 수행한다.

*/

struct Job
{
	int id;
	string requester;
	int pages;
};

inline ostream& operator<<(ostream& os, const Job& job)
{
	os << "[ ID: " << job.id << ", 요청자: " << job.requester << ", 페이지 수: " << job.pages << " ]";
	return os;
}

class Printer
{
public:
	void addJob(int id, string requester, int pages)
	{
		Job newJob{ id, requester, pages };
		printQueue.push(newJob);

		if (printQueue.size() == 1)
		{
			processJobs();
		}
		else
		{
			cout << "인쇄 대기 중: " << newJob << endl;
		}
	}

	void addJob(Job newJob)
	{
		printQueue.push(newJob);

		if (printQueue.size() == 1)
		{
			processJobs();
		}
		else
		{
			cout << "인쇄 대기 중: " << newJob << endl;
		}
	}

	void processJobs()
	{
		while (!printQueue.empty())
		{
			Job currentJob = printQueue.front();

			cout << "인쇄 시작: " << currentJob << endl;

			printQueue.pop();
		}
	}

private:
	queue<Job> printQueue;
};